# üöÄ Deployment Guide - Efficient Trading Platform

This guide covers different deployment methods for the Efficient Trading Platform with rebalancing capabilities.

## üìã Prerequisites

Before deploying, ensure you have:

1. **Binance API Credentials**
   - API Key with Futures and Margin trading permissions
   - Secret Key
   - Whitelist your deployment IP (if using IP restrictions)

2. **Required Environment Variables**
   ```bash
   BINANCE_API_KEY=your_api_key_here
   BINANCE_SECRET_KEY=your_secret_key_here
   ```

## üöÑ Railway Deployment (Recommended)

Railway offers the simplest deployment process with automatic scaling.

### Step 1: Prepare Repository
```bash
# Clone your repository
git clone <your-repo-url>
cd efficient-trading-platform

# Ensure all files are present
python test_setup.py  # Optional: run setup test
```

### Step 2: Deploy to Railway
1. Go to [railway.app](https://railway.app)
2. Connect your GitHub repository
3. Select the efficient-trading-platform repository
4. Railway will auto-detect the Python app

### Step 3: Configure Environment Variables
In Railway Dashboard ‚Üí Variables, add:
```bash
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET_KEY=your_binance_secret_key_here
DEFAULT_TARGET_LTV=74.0
DEFAULT_REBALANCE_THRESHOLD=2.0
LOG_LEVEL=INFO
```

### Step 4: Deploy
- Railway will automatically build and deploy
- Access your app at the generated Railway URL
- Monitor logs in the Railway dashboard

## üê≥ Docker Deployment

For containerized deployment on any platform supporting Docker.

### Step 1: Build Image
```bash
# Build the Docker image
docker build -t efficient-trading-platform .

# Or with custom name
docker build -t your-username/trading-platform:latest .
```

### Step 2: Run Container
```bash
# Run with environment variables
docker run -d \
  --name trading-platform \
  -p 8080:8080 \
  -e BINANCE_API_KEY=your_api_key \
  -e BINANCE_SECRET_KEY=your_secret_key \
  -e DEFAULT_TARGET_LTV=74.0 \
  -e LOG_LEVEL=INFO \
  efficient-trading-platform

# Or using .env file
docker run -d \
  --name trading-platform \
  -p 8080:8080 \
  --env-file .env \
  efficient-trading-platform
```

### Step 3: Access Application
- Open http://localhost:8080
- Check logs: `docker logs trading-platform`
- Stop: `docker stop trading-platform`

## ‚òÅÔ∏è Cloud Platform Deployment

### Heroku
```bash
# Install Heroku CLI and login
heroku login

# Create app
heroku create your-app-name

# Set environment variables
heroku config:set BINANCE_API_KEY=your_key
heroku config:set BINANCE_SECRET_KEY=your_secret

# Deploy
git push heroku main

# Open app
heroku open
```

### AWS EC2
```bash
# Connect to EC2 instance
ssh -i your-key.pem ubuntu@your-ec2-ip

# Install Docker
sudo apt update
sudo apt install docker.io -y
sudo systemctl start docker

# Clone and run
git clone <your-repo>
cd efficient-trading-platform
sudo docker build -t trading-platform .
sudo docker run -d -p 80:8080 --env-file .env trading-platform
```

### Google Cloud Run
```bash
# Build and push to Google Container Registry
gcloud builds submit --tag gcr.io/PROJECT-ID/trading-platform

# Deploy to Cloud Run
gcloud run deploy trading-platform \
  --image gcr.io/PROJECT-ID/trading-platform \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated \
  --set-env-vars BINANCE_API_KEY=your_key,BINANCE_SECRET_KEY=your_secret
```

## üñ•Ô∏è Local Development Setup

For development and testing:

### Step 1: Clone and Setup
```bash
# Clone repository
git clone <your-repo-url>
cd efficient-trading-platform

# Create virtual environment
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt
```

### Step 2: Configure Environment
```bash
# Copy environment template
cp .env.example .env

# Edit .env file with your API keys
nano .env  # or your preferred editor
```

### Step 3: Test Setup
```bash
# Run setup test (optional)
python test_setup.py

# Start development server
python app.py

# Or use startup script
chmod +x startup.sh
./startup.sh
```

## üîß Configuration Options

### Environment Variables
| Variable | Default | Description |
|----------|---------|-------------|
| `BINANCE_API_KEY` | - | Binance API key (required) |
| `BINANCE_SECRET_KEY` | - | Binance secret key (required) |
| `DEFAULT_TARGET_LTV` | 74.0 | Target LTV ratio percentage |
| `DEFAULT_REBALANCE_THRESHOLD` | 2.0 | LTV deviation threshold |
| `MIN_REBALANCE_INTERVAL` | 300 | Minimum seconds between rebalances |
| `MAX_BORROW_AMOUNT_USD` | 10000 | Maximum borrow amount per operation |
| `MIN_REPAY_AMOUNT_USD` | 10 | Minimum repay amount |
| `PORT` | 8080 | Server port |
| `LOG_LEVEL` | INFO | Logging level (DEBUG/INFO/WARNING/ERROR) |
| `FLASK_ENV` | production | Flask environment |

### Railway-Specific Settings
Railway automatically detects and configures:
- Port from `PORT` environment variable
- Build process from `requirements.txt`
- Start command from `railway.json`
- Health checks via `/health` endpoint

## üìä Monitoring and Logs

### Railway Logs
- Access logs via Railway Dashboard ‚Üí Deployments ‚Üí View Logs
- Real-time log streaming available
- Automatic log retention

### Docker Logs
```bash
# View logs
docker logs trading-platform

# Follow logs
docker logs -f trading-platform

# View last 100 lines
docker logs --tail 100 trading-platform
```

### Local Logs
- Application logs: `logs/trading_platform_YYYYMMDD.log`
- Access logs: `logs/access.log` (with Gunicorn)
- Error logs: `logs/error.log` (with Gunicorn)

## üõ†Ô∏è Troubleshooting

### Common Issues

**1. API Connection Failed**
```bash
# Check API credentials
python test_setup.py

# Verify API key permissions on Binance
# Ensure IP whitelist includes deployment server IP
```

**2. Import Errors**
```bash
# Check all dependencies installed
pip install -r requirements.txt

# Verify file structure
python test_setup.py
```

**3. Permission Denied**
```bash
# Make startup script executable
chmod +x startup.sh

# Check file ownership
ls -la
```

**4. Port Already in Use**
```bash
# Kill process using port
sudo lsof -t -i:8080 | xargs sudo kill

# Or use different port
export PORT=8081
python app.py
```

### Health Checks
```bash
# Check application health
curl http://your-app-url/health

# Should return:
{
  "status": "operational",
  "api_configured": true,
  "webhook_count": 0,
  "tracked_positions": 0,
  "timestamp": "2024-01-01T00:00:00"
}
```

## üîê Security Considerations

### Production Deployment
1. **Use HTTPS**: Always deploy with SSL/TLS certificates
2. **API Keys**: Store in secure environment variables, never in code
3. **Firewall**: Restrict access to necessary ports only
4. **Updates**: Keep dependencies updated
5. **Monitoring**: Set up alerts for errors and unusual activity

### Webhook Security
1. **IP Whitelist**: Restrict webhook endpoints to TradingView IPs
2. **Rate Limiting**: Implement rate limiting for webhook endpoints
3. **Validation**: Always validate webhook payloads

## üìà Scaling Considerations

### Horizontal Scaling
- Use load balancer for multiple instances
- Implement shared state storage (Redis/Database)
- Consider message queues for webhook processing

### Vertical Scaling
- Monitor memory usage (especially with large position tracking)
- CPU usage typically low unless processing many webhooks
- Consider increasing timeout values for high-latency networks

## üéØ Post-Deployment Checklist

- [ ] Application starts successfully
- [ ] Health endpoint returns 200
- [ ] Binance API connection works
- [ ] Dashboard loads correctly
- [ ] Webhook endpoints respond
- [ ] Logging is working
- [ ] Environment variables set correctly
- [ ] SSL certificate configured (production)
- [ ] Monitoring/alerts configured
- [ ] Backup strategy in place

---

For additional support, check the main README.md or create an issue in the repository.